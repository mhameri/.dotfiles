# . "$HOME/.gsh"

# Created by fodev.org
function fod() {
  case $1 in
  "--enable" | "-e")
    export http_proxy=http://fodev.org:8118/
    export https_proxy=https://fodev.org:8118/
    export no_proxy="localhost,127.0.0.1,localaddress,.localdomain.com"
    export HTTP_PROXY=http://fodev.org:8118/
    export HTTPS_PROXY=https://fodev.org:8118/
    export NO_PROXY="localhost,127.0.0.1,localaddress,.localdomain.com"
    echo "enable fod proxy !"
    ;;
  "--disable" | "-d")
    unset http_proxy
    unset https_proxy
    unset no_proxy
    unset HTTP_PROXY
    unset HTTPS_PROXY
    unset NO_PROXY
    echo "disable fod proxy !"
    ;;
  "--status" | "-s")
    if [[ $http_proxy == 'http://fodev.org:8118/' ]]; then
      echo 'fod proxy is ENABLED !'
    else
      echo 'fod proxy is DISABLED !'
    fi
    ;;
  *)
    echo "Usage : fod [-e | --enable] [-d | --disable] [-s | --status]"
    echo "Example : "
    echo "  fod --enable to enable fod proxy "
    echo "  fod --disable to disable fod proxy "
    echo "  fod --status to check fod proxy status "
    ;;
  esac
}
# Connect To V2raya
export proxy="http://127.0.0.1:12334/"
function prox() {
  case $1 in
  "--enable" | "-e")
    export http_proxy=$proxy
    export https_proxy=$proxy
    export no_proxy="localhost,127.0.0.1,localaddress,.localdomain.com"
    export HTTP_PROXY=$proxy
    export HTTPS_PROXY=$proxy
    export NO_PROXY="localhost,127.0.0.1,localaddress,.localdomain.com"
    echo "enable V2raya proxy !"
    ;;
  "--disable" | "-d")
    unset http_proxy
    unset https_proxy
    unset no_proxy
    unset HTTP_PROXY
    unset HTTPS_PROXY
    unset NO_PROXY
    echo "disable V2raya proxy !"
    ;;
  "--status" | "-s")
    if [[ $http_proxy == 'http://127.0.0.1:12334/' ]]; then
      echo 'V2raya proxy is ENABLED !'
    else
      echo 'V2raya proxy is DISABLED !'
    fi
    ;;
  *)
    echo "Usage : prox [-e | --enable] [-d | --disable] [-s | --status]"
    echo "Example : "
    echo "  prox --enable to enable V2raya proxy "
    echo "  prox --disable to disable V2raya proxy "
    echo "  prox --status to check V2raya proxy status "
    ;;
  esac
}

# Change dns
# nmcli con
alias getcn="sudo nmcli connection show"
#connectionName=LAN
connectionName=mobinnet
function sdns() {
  case $1 in
  "--google" | "-gg")
    sudo nmcli con mod "$connectionName" ipv4.dns "8.8.8.8 8.8.4.4"
    sudo service NetworkManager restart
    echo "Google dns set!"
    ;;
  "--cloudflare" | "-cf")
    sudo nmcli con mod "$connectionName" ipv4.dns "1.1.1.1 1.0.0.1"
    sudo service NetworkManager restart
    echo "Cloudflare dns set!"
    ;;
  "--usa" | "-us")
    # US Level 3
    sudo nmcli con mod "$connectionName" ipv4.dns "4.2.2.4 4.2.2.2"
    sudo service NetworkManager restart
    echo "US Level 3 dns set!"
    ;;
  "--shecan" | "-sh")
    # https://shecan.ir
    sudo nmcli con mod "$connectionName" ipv4.dns "178.22.122.100 185.51.200.2"
    sudo service NetworkManager restart
    echo "Shecan.ir dns set!"
    ;;
  "--iran" | "-ir")
    # https://403.online
    sudo nmcli con mod "$connectionName" ipv4.dns "10.202.10.202 10.202.10.102"
    sudo service NetworkManager restart
    echo "403.online dns set!"
    ;;
  "--electro" | "-el")
    # https://electro.ir
    sudo nmcli con mod "$connectionName" ipv4.dns "78.157.42.100 78.157.42.101"
    sudo service NetworkManager restart
    echo "Electro dns set!"
    ;;
  "--status" | "-s")
    cat /etc/resolv.conf
    ;;
  *)
    echo "Usage : sdns [-g | --google] [-c | --cloudflare] [-sh | --shecan] [-i | --iran] [-s | --status]"
    echo "Example : "
    echo "  sdns --gg --google to set google dns "
    echo "  sdns --cf --cloudflare to set cloudflare dns "
    echo "  sdns --sh --shecan to set shecan.ir dns "
    echo "  sdns --ir --iran to set 403.online dns "
    echo "  sdns --status cat resolv.conf "
    ;;
  esac
}

# Docker
function dock() {
  case $1 in
  "--enable" | "-e")
    sudo systemctl enable docker.service
    sudo systemctl enable docker.socket
    sudo systemctl enable docker-registry.service
    sudo systemctl enable containerd.service
    sudo systemctl start docker.service
    sudo systemctl start docker.socket
    sudo systemctl start docker-registry.service
    sudo systemctl start containerd.service
    ;;
  "--disable" | "-d")
    sudo systemctl stop docker.service
    sudo systemctl stop docker.socket
    sudo systemctl stop docker-registry.service
    sudo systemctl stop containerd.service
    sudo systemctl disable docker.service
    sudo systemctl disable docker.socket
    sudo systemctl disable docker-registry.service
    sudo systemctl disable containerd.service
    ;;
  "--status" | "-s")
    systemctl list-unit-files | grep -i docker
    ;;
  *)
    echo "Usage : dock [-e | --enable] [-d | --disable] [-s | --status]"
    echo "Example : "
    echo "  dock --enable to enable Docker "
    echo "  dock --disable to disable Docker "
    echo "  dock --status to check Docker status "
    ;;
  esac
}

export PAGER="most"

# Rust
. "$HOME/.cargo/env"

# Go
#export GOROOT=/usr/local/go
export PATH=$PATH:/usr/local/go/bin
export PATH=$PATH:$HOME/go/bin
# Debian base aliases
alias apt='sudo apt'
alias nala='sudo nala'
alias up='export http_proxy=http://127.0.0.1:20172/;nala upgrade'
alias cdd="cd /exports/data"
alias dl="cd $HOME/Downloads/;axel -n 8"

# Appearance
# https://wiki.archlinux.org/title/Dark_mode_switching
# gsettings set org.gnome.desktop.interface gtk-theme "new-theme"
# gsettings set org.gnome.desktop.interface color-scheme 'prefer-dark' 'prefer-light'
# xfconf-query -c xsettings -p /Net/ThemeName -s "new-theme"
# alias setgtk4theme='gsettings get org.gnome.desktop.interface gtk-theme'
# export GTK_THEME="Catppuccin-Mocha-Standard-Mauve-Dark"

setgtk4theme() {
  gsettings set org.gnome.desktop.interface gtk-theme "$1" && xfconf-query -c xsettings -p /Net/ThemeName -s "$1"
}

getgtk4theme() {
  gsettings get org.gnome.desktop.interface gtk-theme && xfconf-query -c xsettings -p /Net/ThemeName
}

alias setgtk4dark="gsettings set org.gnome.desktop.interface color-scheme 'prefer-dark'"

# ls aliases
alias ll="eza -la"
alias lh="eza --icons -la --group-directories-first"

alias rzi='find . -name "*Zone.Identifier" -type f -delete'
#alias btop="bashtop"

alias xrarp30="unrar x -pwww.p30download.com "
alias xrars98="unrar x -psoft98.ir "

alias restk="sudo rmmod atkbd;sudo modprobe atkbd reset=1"

alias doh="docker pull docker.haiocloud.com/"


#export POSH_THEME='/usr/share/oh-my-posh/themes/robbyrussell.omp.json'
#export POSH_THEME='/usr/share/oh-my-posh/themes/the-unnamed.omp.json'



# pipx path
export PATH=$PATH:$HOME/.local/bin

eval $(thefuck --alias)

# fnm
FNM_PATH="/home/mha/.local/share/fnm"
if [ -d "$FNM_PATH" ]; then
  export PATH="$FNM_PATH:$PATH"
  eval "`fnm env`"
fi
eval "$(fnm env --use-on-cd)"

# pnpm
export PNPM_HOME="/home/mha/.local/share/pnpm"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac

alias pnpmx="pnpm dlx"
alias pnpmup="curl -fsSL https://get.pnpm.io/install.sh | sh -"
# pnpm end


if [ -n "$ZSH_VERSION" ]; then
  # assume Zsh
  eval "$(starship init zsh)"
  eval "$(zoxide init zsh)"
  . /opt/asdf-vm/asdf.sh
elif [ -n "$BASH_VERSION" ]; then
  # assume Bash
  eval "$(starship init bash)"
  eval "$(zoxide init bash)"
  eval "$(luarocks completion bash)"
  . /opt/asdf-vm/asdf.sh
fi

# bun completions
[ -s "/home/mha/.bun/_bun" ] && source "/home/mha/.bun/_bun"

# bun
export BUN_INSTALL="$HOME/.bun"
export PATH="$BUN_INSTALL/bin:$PATH"


colorscript -r